Purpose of EcommerceScraper.php
==============================
EcommerceScraper started with the file listing_full.mhtml which contains all product cards and turn it to listing_*_.mhtml.html (why it turn it to html) and fetch product title with color and unit price from products cards. Then created all detail_*.html files for each product and extract other datas price, code, description etc. and created folder for each product and download images for them and providing export all data to excel.

EcommerceScraper.php is a Laravel service class designed to scrape product data from the website https://defiletekstil.com/tr/toptan-bluz by processing a pre-saved MHTML listing file and fetching product detail pages online. It extracts product information such as Title (including color), Price, Unit Price, Product Code, Product Definition, Detail URL, and Image URLs, downloads product images to local storage, and exports the data to an Excel file for analysis. This class is tailored for online scraping, relying on a local MHTML file for the product listing and real-time fetching of detail pages via Browsershot, making it suitable for scenarios requiring up-to-date data and image downloads.

How It Works
============

1. **Initialization**
   The class is located in `app/Services/EcommerceScraper.php` and belongs to the `App\Services` namespace.
   It initializes a Guzzle HTTP client for image downloads and sets the base URL to `https://defiletekstil.com`.

2. **Main Method: scrapeProducts($mhtmlPath)**:
   - Takes a path to a listing MHTML file (e.g., `storage/app/listing_full.mhtml`) in `storage/app/`.
   - Loads the MHTML file, extracts HTML using `extractHtmlFromMhtml`, handling quoted-printable encoding and multipart boundaries.
   - Parses the listing HTML to extract:
     - Product URLs (via `a` tags in `.grid-cols-2 div[data-id]`).
     - Titles with colors (e.g., "Gömlek Yaka Önü Düğme Detaylı Bluz - MORR") from `h2.product-name`.
     - Unit Prices from `div.text-xs.font-normal.text-gray-600`.
   - Falls back to JSON-LD for URLs if DOM parsing fails.
   - Limits processing to 300 products (`$maxProducts`).
   - Logs parsing steps and errors to `storage/logs/laravel.log`.

3. **Detail Page Processing**:
   - Fetches each product detail page online using Browsershot, which renders JavaScript for dynamic content:
     ```php
     $html = Browsershot::url($detailUrl)->waitUntilNetworkIdle()->waitForSelector('div.slick-list img', ['timeout' => 15000])->timeout(60)->bodyHtml();
     ```
   - Saves fetched HTML to `storage/app/detail_<md5>_<timestamp>.html` for debugging.
   - Parses detail HTML to extract:
     - Price (`div.text-gray-600.font-normal.text-base` or JSON-LD).
     - Product Code (`div.categories-detail span:nth-child(2)`).
     - Product Definition (`div.tab-content p`).
     - Image URLs (`div.slick-list div.slick-slide:not(.slick-cloned) img`).
   - Uses listing page Title and Unit Price if available, falling back to detail page Title if necessary.
   - Downloads images to `storage/app/images/<product_code>_<color>/` using `downloadImages`.
   - Falls back to JSON-LD or listing page for images if fewer than 2 are found.
   - Adds a 1-second delay between requests (`sleep(1)`) to avoid overwhelming the server.
   - Supports up to 300 products.

4. **Image Downloading**:
   - Downloads images to folders named `<product_code>_<color>` (e.g., `DF1090_MORR`).
   - Extracts color from Title (e.g., "MORR") or uses UUID/data-id as fallback.
   - Sanitizes folder names to support Turkish characters (ÇĞİÖŞÜ).
   - Skips downloads if the folder exists or if image URLs/product code are missing.
   - Supports `.webp`, `.jpg`, `.png`, `.gif` formats based on Content-Type.

5. **Excel Export**:
   - Calls `exportToExcel` to save scraped data to `storage/app/exports/products_export_<timestamp>.xlsx`.
   - Each row includes: Title, Price, Unit Price, Product Code, Product Definition, Image URLs, Detail URL.
   - Relies on `App\Exports\ProductsExport` for Excel formatting.

6. **Error Handling**:
   - Logs errors for missing MHTML files, empty files, parsing failures, or network issues.
   - Saves debug samples to `storage/app/debug_sample_*.mhtml` if listing HTML parsing fails.
   - Skips products missing critical data (Title or Image URLs) and logs warnings for missing Price.
   - Uses relaxed validation for optional fields (e.g., Price, Product Definition).

Relation to Other Files
=======================

1. **ProductsExport.php**:
   - Location: `app/Exports/ProductsExport.php`
   - Purpose: Defines the Excel export format, mapping product data (Title, Price, Unit Price, Product Code, Product Definition, Image URLs, Detail URL) to columns.
   - Dependency: Must exist and be configured to include `image_urls` in the export.
   - Namespace: `App\Exports`
   - Used in: `exportToExcel` method via `Excel::store(new ProductsExport($products), ...)`.

2. **Laravel Storage**:
   - Location: `storage/app/`
   - Purpose: Stores input MHTML file, debug HTML files, downloaded images, and output Excel files.
   - Required Files:
     - Listing MHTML: `listing_full.mhtml` or similar (e.g., `listing_1747514206_mhtml.html`) in `storage/app/`.
     - Debug HTML: Saved as `detail_<md5>_<timestamp>.html` and `listing_<timestamp>_mhtml.html` in `storage/app/`.
     - Images: Saved to `storage/app/images/<product_code>_<color>/` (e.g., `images/DF1090_MORR/`).
     - Output: Excel files saved to `storage/app/exports/` (created if not exists).
     - Debug: Debug samples (e.g., `debug_sample_listing_full.mhtml`) saved to `storage/app/`.
   - Note: Ensure `storage/app/`, `storage/app/images/`, and `storage/app/exports/` have write permissions (`icacls "path" /grant Everyone:F`).

3. **Log File**:
   - Location: `storage/logs/laravel.log`
   - Purpose: Records scraping progress, errors, and debug information (e.g., file loading, parsing issues, image downloads).
   - Used by: Laravel's `Log` facade for all logging.

4. **Vendor Dependencies**:
   - Packages: `symfony/dom-crawler`, `guzzlehttp/guzzle`, `spatie/browsershot`, `maatwebsite/excel`.
   - Location: `vendor/`
   - Purpose: Provide DOM parsing, HTTP requests (for images), browser rendering (for detail pages), and Excel export functionality.
   - Installed via: `composer.json` and `composer install`.

Where Related Files Should Exist
===============================

For `EcommerceScraper.php` to function correctly, ensure the following files are in place:

1. **EcommerceScraper.php**:
   - Path: `C:\xampp\htdocs\MetaMarketing\app\Services\EcommerceScraper.php`
   - Purpose: Main scraper logic for online scraping.

2. **ProductsExport.php**:
   - Path: `C:\xampp\htdocs\MetaMarketing\app\Exports\ProductsExport.php`
   - Purpose: Excel export formatting, including Image URLs.

3. **Listing MHTML File**:
   - Path: `C:\xampp\htdocs\MetaMarketing\storage\app\listing_full.mhtml` or `C:\xampp\htdocs\MetaMarketing\storage\app\listing_1747514206_mhtml.html`
   - Purpose: Provides product URLs, Titles with colors, and Unit Prices.
   - Note: Required for operation. If missing, no products will be scraped.

4. **Image and Debug Directories**:
   - Path: `C:\xampp\htdocs\MetaMarketing\storage\app\images\` and `C:\xampp\htdocs\MetaMarketing\storage\app\`
   - Purpose: Stores downloaded images (e.g., `images/DF1090_MORR/image_1.webp`) and debug HTML files (e.g., `detail_<md5>_<timestamp>.html`).
   - Note: Created automatically, but ensure write permissions.

5. **Excel Output Directory**:
   - Path: `C:\xampp\htdocs\MetaMarketing\storage\app\exports\`
   - Purpose: Stores output Excel files (e.g., `products_export_1747516860.xlsx`).
   - Note: Created automatically if not exists, but ensure write permissions.

6. **Log File**:
   - Path: `C:\xampp\htdocs\MetaMarketing\storage\logs\laravel.log`
   - Purpose: Logs execution details for debugging.

Example Directory Structure
===========================

```
C:\xampp\htdocs\MetaMarketing\
├── app\
│   ├── Exports\
│   │   └── ProductsExport.php
│   └── Services\
│       ├── EcommerceScraper.php
│       └── OfflineEcommerceScraper.php
├── storage\
│   ├── app\
│   │   ├── listing_full.mhtml
│   │   ├── listing_1747514206_mhtml.html (optional)
│   │   ├── detail_<md5>_<timestamp>.html (debug files)
│   │   ├── debug_sample_listing_full.mhtml (if parsing fails)
│   │   ├── images\
│   │   │   └── DF1090_MORR\
│   │   │       ├── image_1.webp
│   │   │       └── ...
│   │   └── exports\
│   │       └── products_export_1747516860.xlsx
│   └── logs\
│       └── laravel.log
```

Usage Example
=============

```bash
cd C:\xampp\htdocs\MetaMarketing
php artisan tinker
```

```php
use App\Services\EcommerceScraper;
$scraper = new EcommerceScraper();
$result = $scraper->scrapeProducts('listing_full.mhtml');
$filePath = $scraper->exportToExcel($result['products']);
echo $filePath; // Outputs: C:\xampp\htdocs\MetaMarketing\storage\app\exports\products_export_<timestamp>.xlsx
```

Notes
=====

- **Performance**: Scraping 164 products takes ~164-300 seconds due to online fetching (1-second delay per detail page) and image downloads.
- **Environment**: Tested with Laravel 12, PHP 8.2+, Windows, XAMPP, as of May 18, 2025.
- **Troubleshooting**:
  - Check `storage/logs/laravel.log` for errors (e.g., "MHTML file not found", "Failed to fetch detail page").
  - Verify MHTML file with `dir C:\xampp\htdocs\MetaMarketing\storage\app\*.mhtml`.
  - Ensure internet connectivity for detail page fetching.
  - Ensure permissions with `icacls "C:\xampp\htdocs\MetaMarketing\storage\app" /grant Everyone:F`.
- **Limitations**: Requires a valid MHTML file and internet access. Detail page fetching may fail if the website is down or blocks requests. Image downloads increase execution time.
- **Comparison with OfflineEcommerceScraper.php**:
  - `EcommerceScraper.php`: Online, fetches detail pages, downloads images, includes Image URLs in Excel.
  - `OfflineEcommerceScraper.php`: Offline, uses pre-saved detail HTML, skips image downloads, excludes Image URLs from Excel.
  - Both rely on `ProductsExport.php` and `storage/app/` for MHTML and Excel output.

For support, check logs and verify file locations. If issues persist, share log entries and directory listing.