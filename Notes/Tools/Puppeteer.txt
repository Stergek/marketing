Purpose of puppeteer
====================

puppeteer is a Node.js library that provides a high-level API to control headless Chrome or Chromium browsers for web scraping, automated testing, screenshot generation, and PDF creation. In EcommerceScraper.php, it is used indirectly via spatie/browsershot to fetch and render JavaScript-heavy product detail pages from https://defiletekstil.com, enabling extraction of dynamic content like Price, Product Code, Product Definition, and Image URLs. It is not used by OfflineEcommerceScraper.php, which processes pre-saved HTML files offline.

How It Works
============

1. **Initialization**:
   - Installed via npm as `puppeteer`.
   - Located in `node_modules/puppeteer/` (e.g., `C:\xampp\htdocs\MetaMarketing\node_modules\puppeteer/`).
   - Requires Node.js (v14+ recommended) and downloads a Chrome/Chromium binary (~200-300 MB) during installation.

2. **Usage in EcommerceScraper.php**:
   - Integrated via `spatie/browsershot` in the `scrapeDetailPage` method:
     ```php
     use Spatie\Browsershot\Browsershot;
     $html = Browsershot::url($detailUrl)
         ->waitUntilNetworkIdle()
         ->waitForSelector('div.slick-list img', ['timeout' => 15000])
         ->timeout(60)
         ->bodyHtml();
     ```
   - Puppeteer:
     - Launches a headless Chrome instance.
     - Navigates to `$detailUrl` (e.g., `https://defiletekstil.com/tr/gomlek-yaka-onu-dugme-detayli-bluz?RENK=MORR`).
     - Executes JavaScript to render dynamic content (e.g., product images, prices).
     - Waits for network idle and the selector `div.slick-list img` (up to 15 seconds).
     - Returns rendered HTML to Browsershot, which passes it to PHP.
   - HTML is saved to `storage/app/detail_<md5>_<timestamp>.html` for debugging.
   - Performance: ~2.66-6.75 seconds per product (network, rendering, parsing).
     - Network: ~0.05-0.2 seconds (page size ~500 KB-2 MB, 10-100 Mbps).
     - Rendering: ~0.5-2 seconds (JavaScript execution).
     - Selector wait: 1-15 seconds (typically 1-3 seconds).
     - Total for 164 products: ~436-1,107 seconds (~7.3-18.5 minutes).

3. **Features**:
   - Headless browsing: Runs Chrome without a UI, ideal for servers.
   - DevTools Protocol: Controls browser actions (navigation, DOM access).
   - Configurable: Supports timeouts, network waits, and selector waits.
   - Extensible: Can simulate user interactions (not used in your case).

4. **Error Handling**:
   - Throws exceptions for timeouts, navigation failures, or resource issues, caught by Browsershot and logged to `storage/logs/laravel.log`.
   - Example: `Failed to fetch detail page ...: TimeoutError: waiting for selector ...`.

Relation to Other Files
=======================

1. **spatie/browsershot**:
   - Location: `vendor/spatie/browsershot/`
   - Purpose: PHP wrapper that interfaces with Puppeteer via Node.js.
   - Dependency: Requires Puppeteer (default) or a Chrome binary.
   - Note: Configured in `EcommerceScraper.php` to use Puppeteer unless `setChromePath` is called.

2. **EcommerceScraper.php**:
   - Location: `app/Services/EcommerceScraper.php`
   - Purpose: Uses Browsershot (and thus Puppeteer) to fetch detail pages.
   - Dependency: Indirectly relies on Puppeteer for rendering.

3. **OfflineEcommerceScraper.php**:
   - Location: `app/Services/OfflineEcommerceScraper.php`
   - Purpose: Processes pre-saved HTML, no Puppeteer or Browsershot usage.
   - Note: No dependency.

4. **Storage**:
   - Location: `storage/app/`
   - Purpose: Stores rendered HTML (`detail_*.html`) from Puppeteer via Browsershot.

5. **Log File**:
   - Location: `storage/logs/laravel.log`
   - Purpose: Logs Puppeteer/Browsershot errors (e.g., timeouts, rendering issues).

Where It Should Exist
=====================

1. **npm Package**:
   - Path: `C:\xampp\htdocs\MetaMarketing\node_modules\puppeteer\`
   - Purpose: Contains Puppeteer source code and Chrome binary.
   - Installed via: `npm install puppeteer` in project root.

2. **Node.js**:
   - Path: System-level (e.g., `C:\Program Files\nodejs\`) or portable installation.
   - Purpose: Runs Puppeteer’s JavaScript code.
   - Installed via: Node.js installer or `nvm` (`node -v` to verify).

3. **Chrome/Chromium Binary**:
   - Path: Bundled with Puppeteer (e.g., `node_modules/puppeteer/.local-chromium/`).
   - Purpose: Provides browser for rendering.
   - Note: Can use system Chrome if specified in Browsershot.

Example Directory Structure
===========================

```
C:\xampp\htdocs\MetaMarketing\
├── app\
│   └── Services\
│       ├── EcommerceScraper.php
│       └── OfflineEcommerceScraper.php
├── vendor\
│   └── spatie\
│       └── browsershot\
│           ├── src\
│           └── bin\
│               └── browser.js
├── node_modules\
│   └── puppeteer\
│       ├── lib\
│       ├── .local-chromium\
│       └── ...
├── storage\
│   ├── app\
│   │   ├── detail_<md5>_<timestamp>.html
│   │   └── ...
│   └── logs\
│       └── laravel.log
```

Usage Example
=============

Direct Puppeteer usage (not in PHP, shown for context):
```javascript
const puppeteer = require('puppeteer');
(async () => {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('https://defiletekstil.com/tr/gomlek-yaka-onu-dugme-detayli-bluz?RENK=MORR');
    await page.waitForSelector('div.slick-list img', { timeout: 15000 });
    const html = await page.content();
    console.log(html);
    await browser.close();
})();
```

In `EcommerceScraper.php` (via Browsershot):
```php
use Spatie\Browsershot\Browsershot;
$html = Browsershot::url('https://defiletekstil.com/tr/gomlek-yaka-onu-dugme-detayli-bluz?RENK=MORR')
    ->waitUntilNetworkIdle()
    ->waitForSelector('div.slick-list img', ['timeout' => 15000])
    ->timeout(60)
    ->bodyHtml();
```

Installation
============

```bash
cd C:\xampp\htdocs\MetaMarketing
npm install puppeteer
```

Ensure Node.js is installed:
```bash
node -v
npm -v
```
If not, download from https://nodejs.org/ or use `nvm`.

Notes
=====

- **Performance**: Major bottleneck in EcommerceScraper.php (~84% of runtime, ~7.3-18.5 minutes for 164 products) due to JavaScript rendering and network latency.
- **Environment**: Requires Node.js (~50 MB) and Puppeteer (~400-600 MB with Chrome). Tested with Laravel 12, PHP 8.2+, Windows, XAMPP, May 18, 2025.
- **Troubleshooting**:
  - Check `storage/logs/laravel.log` for errors (e.g., `TimeoutError`).
  - Verify Node.js: `node -v` (v14+ recommended).
  - Verify Puppeteer: `npm list puppeteer` (expect ~1.22.x or higher).
  - Test Puppeteer:
    ```bash
    cd C:\xampp\htdocs\MetaMarketing
    node -e "const puppeteer = require('puppeteer'); puppeteer.launch().then(browser => browser.close());"
    ```
  - Test Browsershot: `php artisan tinker`, `Browsershot::url('https://google.com')->bodyHtml()`.
  - Ensure disk space: ~600 MB free for Puppeteer.
- **Limitations**:
  - CPU/RAM-intensive (~100-500 MB per instance).
  - Sequential processing in Browsershot (no parallel fetching).
  - Requires Node.js, adding setup complexity.
- **Alternatives**:
  - System Chrome binary (specify via `Browsershot::setChromePath`).
  - Playwright (similar Node.js library, supports multiple browsers).
- **Relation to Browsershot**:
  - Default backend unless Chrome path is set.
  - Configurable via `vendor/spatie/browsershot/bin/browser.js`.

For support, share logs, `node -v`, `npm list puppeteer`, and test results.